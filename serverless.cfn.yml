# To deploy for the first time, and for each update,
# run both of the following commands in order:
#
# aws cloudformation package \
# --template-file serverless.cfn.yml \
# --output-template-file serverless-xfm.cfn.yml \
# --s3-bucket <your-s3-bucket-name>
#
# aws cloudformation deploy \
# --template-file <path-to-file/serverless-xfm.cfn.yml> \
# --stack-name StartupKitServerless \
# --capabilities CAPABILITY_IAM


AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Startup Kit RESTful API backed by a SimpleTable (DynamoDB).


Globals:

  Function:
    Timeout: 559
    Runtime: nodejs8.10
    Environment:
      Variables:
        TABLE_NAME: !Ref Table

  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"


Resources:
  
  CreateFunctionSignup:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.signup
      FunctionName: StartupKitCreateFunction
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /user/new
            Method: post

  CreateFunctionForgotPassword:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.forgotPassword
      FunctionName: StartupForgotPassword
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /user/forgot-password
            Method: post

  CreateFunctionGetPayment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.getPayment
      FunctionName: StartupGetPayment
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /payment/id
            Method: get

  CreateFunctionCreateOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.createOrder
      FunctionName: StartupCreateOrder
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /payment/add
            Method: post          

  CreateFunctionOtp:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.otp
      FunctionName: StartupOtp
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /user/otp
            Method: post

  CreateFunctionResendOtp:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.resendOtp
      FunctionName: StartupResendOtp
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /user/resend-otp
            Method: post

  CreateFunctionLogin:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.login
      FunctionName: StartupLogin
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /user/login
            Method: post

  CreateFunctionFacebook:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.facebook
      FunctionName: StartupFacebook
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /user/facebook
            Method: post

  CreateFunctionProfile:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.profile
      FunctionName: StartupProfile
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /user/profile
            Method: post

  CreateFunctionAddOrgs:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.addOrgs
      FunctionName: StartupaddOrgs
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /org/new
            Method: post

  CreateFunctionAddFileOrgs:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.addFileOrgs
      FunctionName: StartAddFileOrgs
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /org/upload
            Method: post

  CreateFunctionAddFileOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: order.addFileOrder
      FunctionName: StartAddFileOrder
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /order/upload
            Method: post

  CreateFunctionAddFileInvoiceOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: order.addInvoiceOrder
      FunctionName: StartAddFileInvoiceOrder
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /invoice/upload
            Method: post

  CreateFunctionAddOrder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.addOrder
      FunctionName: StartAddOrder
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /order/create
            Method: post

  CreateFunctionTypeOffOrg:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.typeOffOrg
      FunctionName: StartTypeOffOrg
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /org/types
            Method: get

  CreateSubcriptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.createSubcription
      FunctionName: StartupSubcription
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /subscription/new
            Method: post 

  CreateInqueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.createInquery
      FunctionName: StartupInqueryFunction
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /inquery/new
            Method: post
  
    CreateSheduleReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.SheduleReport
      FunctionName: SheduleReport
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /shedule/new
            Method: get          
  

  GetAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getAll
      FunctionName: StartupKitGetAllFunction
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /todo/all
            Method: get

  GetImageViewFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.imageView
      FunctionName: GetImageViewFunction
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /docs/all
            Method: get

  GraphQl:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: app/
      Handler: app.lambdaHandler
      FunctionName: StartupKitGraphQlFunction
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /app
            Method: any

  # API functions related to active TODO items
  
  GetActiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getActive
      FunctionName: StartupKitGetActiveFunction
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /todo/active
            Method: get

  UpdateActiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.updateActive
      FunctionName: StartupKitUpdateActiveFunction
      Policies: AmazonDynamoDBFullAccess
      Events:
        PutResource:
          Type: Api
          Properties:
            Path: /todo/active
            Method: put

  # API functions related to completed TODO items
  
  GetCompleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getComplete
      FunctionName: StartupKitGetCompleteFunction
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /todo/complete
            Method: get

  MarkCompleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.markComplete
      FunctionName: StartupKitMarkCompleteFunction
      Policies: AmazonDynamoDBFullAccess
      Events:
        PutResource:
          Type: Api
          Properties:
            Path: /todo/complete
            Method: put

  DeleteCompleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.deleteComplete
      FunctionName: StartupKitDeleteCompleteFunction
      Policies: AmazonDynamoDBFullAccess
      Events:
        DeleteResource:
          Type: Api
          Properties:
            Path: /todo/complete
            Method: delete

  Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
         Name: todo_id
         Type: String
      ProvisionedThroughput:
         ReadCapacityUnits: 5
         WriteCapacityUnits: 5


Outputs:

  ApiUrl:
    Description: URL of the Prod stage of the API endpoint
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
